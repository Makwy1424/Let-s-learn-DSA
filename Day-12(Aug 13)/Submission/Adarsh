//Rabin-Karp Algo

#define noC 256
#define OF INT_MAX

class Solution
{
    public:
        vector <int> search(string pat, string txt)
        {
            vector<int> v;
            int i, j, hashPat = 0, hashTxt = 0, dPow = 1;

            for(i= 0; i<pat.length()-1; i++)
                dPow = (dPow * noC) % OF;
            
            for(i = 0; i<pat.length(); i++){
                hashPat = (hashPat*noC + pat[i]) % OF;
                hashTxt = (hashTxt*noC + txt[i]) % OF;
            }
            
            for(i=0; i<=txt.length()-pat.length(); i++){
                if(hashTxt == hashPat){
                    for(j = 0; j<pat.length(); j++){
                        if(pat[j]!=txt[j+i])
                            break;
                    }
                    if(j == pat.length())
                        v.push_back(i+1);
                }
                if(i<txt.length()-pat.length()){
                    hashTxt = ((hashTxt - txt[i]*dPow)*noC + txt[i+pat.length()]) % OF;
                    if(hashTxt<0)
                        hashTxt = hashTxt + OF;
                }
            }
            if(v.empty())
                v.push_back(-1);
                
            return v;
        }
};


//BruteForce Algo
class Solution
{
    public:
        vector <int> search(string pat, string txt)
        {
            vector<int> v;
            int i, j;
            for(i=0; i<=txt.length()-pat.length(); i++){
                if(txt[i] == pat[0]){
                    for(j = 1; j<pat.length(); j++){
                        if(pat[j]!=txt[j+i])
                            break;
                    }
                    if(j == pat.length()){
                        v.push_back(i+1);
                    }
                }
            }
            if(v.empty())
                v.push_back(-1);
                
            return v;
        }
};
