#include<bits/stdc++.h>
using namespace std;


class Solution
{
public:
    string longestPalindrome(string s)
    {
        // I have to do it by DP.
        int n = s.size();
        vector<vector<bool>> table(n, vector<bool>(n, false));
        for (int i = 0; i < n; i++)
            table[i][i] = true;
        int starting = 0, maxLength = 1;
        for (int i = 0; i < n - 1; i++)
        {
            if (s[i] == s[i + 1])
            {
                table[i][i + 1] = true;
                starting = i;
                maxLength = 2;
            }
        }

        // For length>3
        for (int k = 3; k <= n; k++)
        {
            for (int i = 0; i < n - k + 1; i++)
            {
                int j = i + k - 1;
                if (table[i + 1][j - 1] && s[i] == s[j])
                {
                    table[i][j] = true;
                    starting = i;
                    maxLength = k;
                }
            }
        }

        string temp(s.begin() + starting, s.begin() + starting + maxLength);
        return temp;
    }
};

int main(){

	return 0;
}