int Solution::findMedian(vector<vector<int> > &A) {
    int r = A.size(), c = A[0].size();
    int low = A[0][0], high = A[0][c-1];
    int desiredCount = (r*c+1)/2;
    for(int i=1; i<r; i++){
        low = min(low,A[i][0]);
        high = max(high,A[i][c-1]);
    }
    while(low<high){
        int mid = low + ((high-low)>>1);
        int count = 0;
        for(int i=0; i<r; i++){
            count+=(upper_bound(A[i].begin(), A[i].end(), mid)-A[i].begin());
        }
        if(count<desiredCount)
            low = mid+1;
        else
            high = mid;
    }
    return low;
}
